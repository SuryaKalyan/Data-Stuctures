// Btree.cpp : Defines the entry point for the console application.
//
#include "stdafx.h"
#include <iostream>
#include <time.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#define SIZE_KEY 32
#define SIZE_VALUE 256
using namespace std;
typedef struct Metadata
{
	struct Metadata(char* key, char* value)
	{
		strcpy(this->key,key);
		strcpy(this->value, value);
		left = NULL;
		right = NULL;
	}
	char key[SIZE_KEY];
	char value[SIZE_VALUE];
	struct Metadata* left;
	struct Metadata* right;
} METADATA;
class BinarySearchTree
{
private:
	int size;
	METADATA* root;
	bool addNode(METADATA** current_node, METADATA* new_node);
	bool getNode(METADATA* current_node, char* key, char* value);
	void removeAllNodes(METADATA* node);
	void processNodesInOrder(METADATA* node);
	int getTreeDepth(METADATA* node);
	bool containsNode(METADATA* node, char* key);
	bool removeNode(METADATA** node, char* key);
	void removeRootNode(METADATA** node);
	void moveLeftMostNode(METADATA** node, METADATA* root);
public:
	BinarySearchTree();
	virtual ~BinarySearchTree();
	bool add(char* key, char* value);
	bool remove(char* key);
	void removeAll();
	bool get(char* key, char* value);
	bool contains(char* key);
	void displayInOrder();
	int getSize();
	int getDepth();
};

// BinarySearchTree.cpp
BinarySearchTree::BinarySearchTree()
{
	root = NULL;
	size = 0;
}
BinarySearchTree::~BinarySearchTree()
{
	removeAll();
}
bool BinarySearchTree::add(char* key, char* value)
{
	if (key == NULL || value == NULL || strlen(key) > SIZE_KEY - 1
		|| strlen(value) > SIZE_VALUE - 1)
	{
		return false;
	}
	METADATA* new_node = new METADATA(key, value);
	return addNode(&root, new_node);
}
bool BinarySearchTree::addNode(METADATA** current_node, METADATA* new_node)
{
	if (*current_node == NULL)
	{
		*current_node = new_node;
		size++;
		return true;
	}
	else
	{
		if (strcmp(new_node->key, (*current_node)->key) < 0)
		{
			return addNode(&((*current_node)->left), new_node);
		}
		else if (strcmp(new_node->key, (*current_node)->key) > 0)
		{
			return addNode(&((*current_node)->right), new_node);
		}
		else
		{
			delete new_node;
			return false;
		}
	}
}
bool BinarySearchTree::remove(char* key)
{
	return removeNode(&root, key);
}
bool BinarySearchTree::removeNode(METADATA** node, char* key)
{
	if (*node != NULL)
	{
		if (strcmp(key, (*node)->key) == 0)
		{
			removeRootNode(node);
			size--;
			return true;
		}
		else if (strcmp(key, (*node)->key) < 0)
		{
			return removeNode(&((*node)->left), key);
		}
		else
		{
			return removeNode(&((*node)->right), key);
		}
	}
	else
	{
		return false;
	}
}
void BinarySearchTree::removeRootNode(METADATA** root)
{
	METADATA* temp;
	if ((*root)->left == NULL && (*root)->right == NULL)
	{
		delete(*root);
		*root = NULL;
	}
	else if ((*root)->right == NULL)
	{
		temp = *root;
		*root = (*root)->left;
		delete(temp);
	}
	else if ((*root)->left == NULL)
	{
		temp = *root;
		*root = (*root)->right;
		delete(temp);
	}
	else
	{
		moveLeftMostNode(&((*root)->right), *root);
	}
}
void BinarySearchTree::moveLeftMostNode(METADATA** node, METADATA* root)
{
	if (*node != NULL && (*node)->left == NULL)
	{
		METADATA* temp = *node;
		strcpy_s(root->key, (*node)->key);
		strcpy_s(root->value, (*node)->value);
		*node = (*node)->right;
		delete(temp);
	}
	else
	{
		moveLeftMostNode(&((*node)->left), root);
	}
}
void BinarySearchTree::removeAll()
{
	removeAllNodes(root);
	root = NULL;
	size = 0;
}
void BinarySearchTree::removeAllNodes(METADATA* node)
{
	if (node != NULL)
	{
		removeAllNodes(node->left);
		removeAllNodes(node->right);
		cout << "Removing node - key: " << node->key << "\t" << node->value
			<< endl;
		delete node;
	}
}
bool BinarySearchTree::get(char* key, char* value)
{
	return getNode(root, key, value);
}
bool BinarySearchTree::getNode(METADATA* node, char* key, char* value)
{
	if (node == NULL)
	{
		value[0] = '\0';
		return false;
	}
	else
	{
		if (strcmp(key, node->key) == 0)
		{
			strcpy(value, node->value);
			return true;
		}
		else if (strcmp(key, node->key) < 0)
		{
			return getNode(node->left, key, value);
		}
		else
		{
			return getNode(node->right, key, value);
		}
	}
}
bool BinarySearchTree::contains(char* key)
{
	return containsNode(root, key);
}
bool BinarySearchTree::containsNode(METADATA* node, char* key)
{
	if (node == NULL)
	{
		return false;
	}
	else
	{
		if (strcmp(key, node->key) == 0)
		{
			return true;
		}
		else if (strcmp(key, node->key) < 0)
		{
			return containsNode(node->left, key);
		}
		else
		{
			return containsNode(node->right, key);
		}
	}
}
void BinarySearchTree::displayInOrder()
{
	processNodesInOrder(root);
}
void BinarySearchTree::processNodesInOrder(METADATA* node)
{
	if (node != NULL)
	{
		processNodesInOrder(node->left);
		cout << "key: " << node->key << "\tvalue: " << node->value << endl;
		processNodesInOrder(node->right);
	}
}
int BinarySearchTree::getSize()
{
	return size;
}
int BinarySearchTree::getDepth()
{
	return getTreeDepth(root);
}
int BinarySearchTree::getTreeDepth(METADATA* node)
{
	int depth_left;
	int depth_right;
	if (node == NULL)
	{
		return 0;
	}
	else
	{
		depth_left = getTreeDepth(node->left);
		depth_right = getTreeDepth(node->right);
		if (depth_left > depth_right)
		{
			return depth_left + 1;
		}
		else
		{
			return depth_right + 1;
		}
	}
}
void main()
{
	{
		BinarySearchTree* tree = new BinarySearchTree();
		char key[SIZE_KEY];
		char value[SIZE_VALUE];
		int i;
		cout << "Adding three keys and values into the tree." << endl;
		for (i = 0; i<4; i++)
		{
			if (i == 0)
			{
				strcpy(key, "123");
				strcpy(value, "Shiv");
			}
			if (i == 1)
			{
				strcpy(key, "122");
				strcpy(value, "Vishy");
			}
			if (i == 2)
			{
				strcpy(key, "121");
				strcpy(value, "Ben");
			}
			if (i == 3)
			{
				strcpy(key, "120");
				strcpy(value, "Surya");
			}
			if (!tree->contains(key))
			{
				cout << "Adding node - key: " << key << " value: " << value
					<< endl;
				tree->add(key, value);
			}
			else
			{
				cout << "Generated duplicate key: " << key << endl;
			}
		}
		cout << "\nIn order traversal of tree:" << endl;
		tree->displayInOrder();
		cout << "\nDepth of tree before removing nodes: " << tree->getDepth()
			<< endl;
		cout << "Size of tree before removing nodes: " << tree->getSize()
			<< endl;
		cout << "\nRetrieving one value from the tree:" << endl;
		if (tree->get("123", value))
		{
			cout << " Value: " << value << endl;
		}
		cout << "\nRemoving one node from the tree:" << endl;
		if (tree->contains("123"))
		{
			tree->remove("123");
			tree->remove("121");
			
		}
		cout << "\nIn order traversal of tree:" << endl;
		tree->displayInOrder();
		cout << "\nDepth of tree after removing nodes: " << tree->getDepth()
			<< endl;
		cout << "Size of tree after removing nodes: " << tree->getSize()
			<< endl;
		cout << "\nDestroying the tree:" << endl;
		delete tree;
	}
}
